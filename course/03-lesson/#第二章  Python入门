#第二章  Python入门

##什么是计算机语言
    计算机就是一台用来计算的机器，人让计算机干什么就干什么，
    需要通过计算机的语言来控制计算机（编程语言）
    计算机语言其实和人类的语言没有本质的区别，不同点就是交流的主体不同！
    计算机语法发展经历了三个阶段：
           机器语言（人类原始阶段）
                  -机器语言通过二进制编码编写程序
                  -执行效率好，编写起来太麻烦

            符号语言（汇编）（人类的手工业阶段）
                  -使用符号来代替机器码
                  -编写程序时，不需要使用二进制，而是直编写符号
                  -编写完成后，需要将符号转换为机器码，然后再由计算机执行
                          符号转化为机器码的过程称为汇编
                          将机器码转化为符号的过程，成为反汇编
                  -汇编语言一般使用某些硬件，兼容性差。
            高级语言（人类的工业化阶段）
                  -高级语言的语法基本和现在的英语语法类似，并且和硬件没有太紧密的联系
                  -也就是说我们通过高级语言开发程序可以在不同的硬件系统中执行
                  -并且高级语言学习起来也更加的容易，现在我们知道的语言将基本都是高级语言
                  -C、C++、Java、JavaScript、Python

##编译型语言和解释型语言
    计算机只能识别二进制编码（机器码）所以任何语言再交由计算机执行时必须要先转化为机器码交由计算机执行
             也就是像print（hello）必须转换为类似10101这样的机器码

    根据转换时机不同，语言分为两大类：
           编译型语言
                   -C语言
                   -编译型语言，会在代码执行前将代码编译为机器码，然后将机器码交由计算机执行
                   -a（源码）--编译-->b(编译后的机器码)
                   -特点
                        执行速度快，
                        跨平台性比差

           解释型语言
                    -Python  JS  Java
                    -解释型语言，不糊UI在执行前对代码进行编译，而是在执行的同时一边执行一遍编译
                    -a（源码）--解释器-->解释执行
                    -特点
                         执行速度快
                         跨平台性比较好  

##Python的介绍
     Python是解释型语言

      Life  is  short  I  need  Python（人生苦短，我用Python）

      Python的用途
              web应用
                     Facebook  豆瓣  。。。
               爬虫程序
               科学计算
               机动化运维
               大数据应用（数据清洗）      
               云计算
               人工智能
               。。。

##Python开发环境搭建
       开发环境搭建就是安装Python的解释器  
       Python的解释器分类：
               CPython(官方)
                      用c语言编写的Python解释器
               pypy
                      用Python语言编写的Python解释器
               ironPython
                      用.net编写的Python解释器
               jpython
                      用Java编写的Python解释器

        步骤：
              1.下载安装包
                          -3.x
                          -2.x
               2安装

##Python的交互界面
       当我们通过命令来输入Python，所进入到的界面就是Python的交互界面
       结构：
       版本和版权声明
         Python 3.10.6 (tags/v3.10.6:9c7b4bd, Aug  1 2022, 21:53:49) [MSC v.1932 64 bit (AMD64)] on win32
         Type "help", "copyright", "credits" or "license" for more information.

         命令提示符
         >>>
          
         在命令提示符后可以直接输入Python的指令!输入完的指令将会被Python的解释器立即执行！

         安装Python的同时，会自动安装一个Python的开发工具IDLE，通过IDLE也可以进入到交互模式
         但是不同的是，在IDLE中可以通过tab键来查看语句的提示。
         IDLE实际上就是一个交互界面，可以有一些简单的提示，并且可以将代码保存
   
       交互模式只能是你输入一行代码，他就是执行一行，所以他并不适用于我们日常开发，
         尽可以用来做一些日常的简单测试，
       我们一般会将Python代码白那些到一个py文件中，然后通过Python指令；来执行文件中的代码

##Python和sublime的整合
      1.在sublime中执行Python代码，Ctrl + b 自动在sublime内置的控制台中执行
           这种执行方式，在某些版本的sublime中对中文支持不好

      2.使用sublimeREPL来运行Python代码
             安装完成，设置快捷键，希望按f5则自动执行当前的Python代码

###  小游戏《孙悟空大战白骨精》
1.身份选择
        1.显示提示信息
            欢迎光临 xxx 游戏
            请选择你的身份：
                    1.xxx
                    2.xxx
            请选择：xxx
        2.根据用户选择来分配信息（显示不同的提示消息）
            1. ····
            2. ····
            3. ····

2.游戏进行
    1.显示玩家的基本信息（攻击力、生命值）
    2. 显示玩家可以进行的操作：
            1.练级
                - 提升玩家攻击力和生命值
            2.打boss
                - 玩家对BOSS进行攻击，玩家要攻击BOSS，BOSS对玩家进行反击
                - 计算BOSS是否被玩家消灭，玩家是否被玩家消灭
                - 游戏结束
            3.逃跑
                - 退出游戏，显示提示信息，游戏结束

# 显示欢迎信息
print('-'*20,'欢迎来到大战白骨精','-'*20)
# 显示身份选择信息
print('请选择你的身份：')
print(' \t1.孙悟空 ')
print(' \t2.猪八戒 ')
# 游戏的身份选择
player_choose = input('请选择[1-2]：')

#打印分割线
print('-'*60)

# 根据用户的选择显示不同的提示信息
#选择1
if player_choose == '1':
    print('你选择了1，恭喜你，你将以->孙悟空<-的身份来进行游戏！')
#选择2
elif player_choose== '2':
    print('你选择了2，恭喜你，你将以->猪八戒<-的身份来进行游戏！')
#其他选择
else :
    print('你选择错误，系统将自动匹配->孙悟空<-的身份来进行游戏！')

#进入游戏

# 显示玩家的信息（攻击力，生命值）
# 创建变量，来保存玩家的生命值和攻击力
player_life = 2 #生命值
player_attack = 2 #攻击力值

# 创建一个变量，保存boss的生命值和攻击力
boss_life = 10  #boss生命值
boss_attack = 10 #boss 攻击力


#由于游戏选项是需要反复显示的，所以必须将其编写到一个循环中
while True:
    #打印分割线
    print('-'*60)
    #现实游戏选项，游戏正式开始
    print('请选择你要进行的操作：')
    print('\t1.练级')
    print('\t2.打boss')
    print('\t3.逃跑')
    game_choose = input ('请选择要做的操作[1-3]：')
    #用户的选择
    if game_chose =='1':
        player_life +=2
        player_attack +=2
            # 打印分割线
        print('-'*60)
        # 显示玩家的信息（攻击力，生命值）
        print(f'恭喜你升级了，你现在的生命值是{player_life}，你现在的攻击力是{player_attack}')
    elif game_choose =='2':
        # 玩家攻击boss
        # 减去boss的生命值，减去的生命值应该等与玩家的攻击力
        boss_life -= player_attack

        # 打印分割线
        print('-'*60)
        print(f'->白骨精<-受到了{player_attack},点伤害')
        # 检查BOSS是否死亡
        if boss_life <= 0 :
            # boss 死亡，player胜利，游戏结束
            print(f'->白骨精<-受到了{player_attack}点伤害，重伤不治死了，->孙悟空<-赢得胜利！')
            # 游戏结束
            break

            # boss要反击玩家
            # 减去玩家生命值
        player_life -= boss_attack
        print(f'->孙悟空<受到了白骨精{boss_attack}点伤害)
        # 检查玩家是否死亡
        if player_life <= 0:
            # 玩家死亡
            print(f'->孙悟空<-受到了{boss_attack}点伤害，重伤不治死了,GAME OVER')
            # 游戏结束
            break
    elif game_choose =='3':
        # 打印分割线
        print('-'*60)
        # 逃跑，退出游戏
        print('->孙悟空<- 逃跑了')
        break
    else:
        # 打印分割线
        print('-'*60)
        print:('你输入有误，请重新输入！')